// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package stores

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ToastGlobalStore() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"text/javascript\">\n  document.addEventListener(\"alpine:init\", () => {\n    Alpine.store(\"toast\", {\n      toasts: [],\n      timeout: null,\n      formatter: new Intl.DateTimeFormat(\"sv-SE\", {\n        dateStyle: \"short\",\n        timeStyle: \"short\",\n      }),\n\n      addToast(message, type = \"info\") {\n        var toast = { type, message, timestamp: this.formatter.format(new Date()) };\n        this.toasts.push(toast);\n\n        if (this.toasts.length > 3) {\n          clearTimeout(this.timeout);\n          this.toasts.shift();\n        } \n\n        this.timeout = setTimeout(() => { this.toasts.shift(); }, 3000);\n      }\n    })\n  });\n\n  document.addEventListener(\"htmx:beforeSwap\", (event) => {\n    var contentType = event.detail.xhr.getResponseHeader(\"Content-Type\");\n    if (contentType === \"application/json\") {\n      event.detail.shouldSwap = false;\n    } \n  })\n\n  document.addEventListener(\"htmx:afterRequest\", (event) => {\n    var contentType = event.detail.xhr.getResponseHeader(\"Content-Type\");\n    if (contentType !== \"application/json\") return;\n\n    var responseData = event.detail.xhr.responseText;\n    if (responseData === \"\") return;\n\n    var toastType = \"info\";\n    if (event.detail.failed) toastType = \"error\";\n\n    var parsedResponse = JSON.parse(responseData);\n    var toastMessage = parsedResponse.message || \"Unknown error occurred.\";\n\n    Alpine.store(\"toast\").addToast(toastMessage, toastType)\n  });\n  </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
